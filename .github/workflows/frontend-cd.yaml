
name: Continuous Deployment workflow for frontend application

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'
env:
  NODE_VERSION: 18.x

jobs:
  lint:
    name: frontend lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            npm-

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint -- --fix

  test:
    name: Frontend Testing
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  build:
    name: push docker image to aws ecr
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: ./starter/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: push docker image to aws ecr
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws eks update-kubeconfig --name cluster
          export EXTERNALIP=$(kubectl get svc backend -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}{"\n"}{.status.loadBalancer.ingress[0].ip}')
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --build-arg=REACT_APP_MOVIE_API_URL=http://$EXTERNALIP .
          docker images
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Cache Docker image
        uses: actions/cache@v3
        with:
          path: ~/docker-cache
          key: docker-${{ github.sha }}-frontend
          restore-keys: |
            docker-${{ github.sha }}-

  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: login to aws ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name cluster

      - name: Run init.sh
        run:  |
          ./init.sh || true
        working-directory: ./setup

      - name: Set Docker image in Kustomize
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./starter/frontend/k8s

      - name: Apply Kubernetes resources
        run: |
          kustomize build | kubectl apply -f -
        working-directory: ./starter/frontend/k8s
